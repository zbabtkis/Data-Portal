<?php
/**
 * @file
 * Drupal data portal module -- provides backend for javascript web application.
 */

/**
 * Implements hook_menu().
 */
function biogeog_portal_menu() {
	$items = array();

	// @TODO find a way to deal with url arguments so that Drupal can still
	// read them with unknown path settings.

	// This currently can't be set from the administrative menu so will
	// always be set to data/portal
	$page_path = variable_get('data_portal_page_path', 'data/portal');

	// Main data portal page that web app is rendered on.
	$items[$page_path] = array(
		'title' => 'Data Portal',
		'description' => t('Web portal data collection'),
		'page callback' => 'biogeog_portal_page_gen',
		'access arguments' => array('access data portal'),
	  'type' => MENU_NORMAL_ITEM);
	// Module configuration menu.
	$items['admin/config/data-portal'] = array(
		'title' => 'Data Portal Settings',
		'description' => t('Configuration for the data portal module'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('biogeog_portal_config'),
		'access arguments' => array('access data portal'),
	  'type' => MENU_NORMAL_ITEM);
	// XHR interface for requesting directory listing.
	$items[$page_path . '/update/%'] = array(
		'title' => 'Data Portal Update',
		'page callback' => 'biogeog_portal_ajax_page',
		'page arguments' => array(3),
		'access arguments' => array('access data portal'),
	  'type' => MENU_CALLBACK);
	// XHR interface for requesting image.
	$items[$page_path . '/get-image/%'] = array(
		'title' => 'Data Portal Get Image',
		'page callback' => 'biogeog_portal_get_image',
		'page arguments' => array(3),
		'access arguments' => array('access data portal'),
	  'type' => MENU_CALLBACK);
	// XHR interface for requesting plain text.
	$items[$page_path . '/get-text/%'] = array(
		'title' => 'Data Portal Get Image',
		'page callback' => 'biogeog_portal_get_text',
		'page arguments' => array(3),
		'access arguments' => array('access data portal'),
	  'type' => MENU_CALLBACK);
	return($items);
}
/**
 * Config form for Data Portal settings.
 */
function biogeog_portal_config() {
	// Filesystem path that the module crawls -- set by user or default to '/'.
	$fs_path = variable_get('data_portal_fs_path', '/');
	// Path for data portal to be rendered on. Defaults to '/data/portal'.
	$page_path = variable_get('data_portal_page_path', '/data/portal');
	// Gets time that the db file was last updated. Helps determine whether data crawl has finished.
	$ft = filemtime($_SERVER['DOCUMENT_ROOT'] . '/' . drupal_get_path('module', 'biogeog_portal') . '/db/dir_db.csv');
	$form = array(); // Holds form for rendering by drupal_get_form.

	if(time() - $ft >= 60) { //  If file was last updated more than 1 minute ago, datacrawl has completed.
		drupal_set_message('Filesystem crawl complete. You can now run a database update!');
		$disabled = FALSE;
	} else {
		drupal_set_message('Filesystem crawl still running. You can run the database update when crawling is complete');
		$disabled = TRUE;
	}
	// Filesystem path to crawl.
	$form['data_portal_fs_path'] = array(
		'#type' => 'textfield',
		'#default_value' => $fs_path);
	/*Customizable display path disabled for now due to menu argument placement issue.
	$form['data_portal_page_path'] = array(
		'#type' => 'textfield',
		'#default_value' => $page_path);*/
	$form['run_cec_data_up'] = array(
		'#type' => 'submit',
		'#value' => 'Run Data Update',
		'#submit' => array('biogoeg_portal_db_up'),
		'#disabled' => $disabled);
	$form['recrawl'] = array(
		'#type' => 'submit',
		'#value' => 'Recrawl',
		'#submit' => array('biogeog_portal_run_recrawl'));

	// Saves form input and renders form.
	return(system_settings_form($form));
}

function biogeog_portal_run_recrawl() {
	// Data path to crawl.
	$fs_path = variable_get('data_portal_fs_path', '/');
	$module = drupal_get_path('module', 'biogeog_portal');
	// Save currend working directory to return to once find has been executed.
	$site_root = exec('pwd');
	// Change directory to data dir.
	chdir($fs_path);
	// Find all files in data path (set in Data Portal Admin settings).
	exec("find . > $site_root/$module/db/dir_db.csv &");
	chdir($site_root);

	drupal_set_message("Now crawling for data...");
}

function biogoeg_portal_db_up() {
	background_process_start('biogeog_portal_run_db_up');
}

class FS {
	// Start counting at 1.
	public $id = 1;
	public $path = "";
	public function add_path($path) {
		$path = $this->path_to_str($path);
		if($this->fetch_path($path) == null) {
			$this->path = new Path($path, $this->id);
			$this->id++;
			$this->db_insert();
		}
	}
	public function get_parent($path) {
		$path = $this->path_to_arr($path);
		array_pop($path);
		$path = $this->path_to_str($path);
		$parent = $this->fetch_path($path);
		return $parent;
	}
	public function get_pid($path) {
		$parent = $this->get_parent($path->path);
		$pid = $parent ? $parent['id'] : 0;
		return $pid;
	}
	public function get_ppid($path) {
		$parent = $this->get_parent($path->path);
		dsm($parent);
		$ppid = $parent ? $parent['pid'] : 0;
		return $ppid;
	}
	public function db_insert() {
		$path = $this->path;
		db_insert('biogeog_portal_data')
			->fields(array(
				'title' => $path->title,
				'pid' => $this->get_pid($path),
				'ppid' => $this->get_ppid($path),
				'id' => $path->id,
				'path' => $path->path))
			->execute();
	}
	public function fetch_path($path) {
		$result = db_select('biogeog_portal_data', 'b')
			->fields('b')
			->condition('path',$path,'=')
			->execute()->fetchAssoc();
		return($result);
	}
	public function path_to_str($path) {
		if(gettype($path) == 'array') {
			$path = implode('/', $path);
		}
		return $path;
	}
	public function path_to_arr($path) {
		if(gettype($path) == 'string') {
			$path = explode('/', $path);
		}
		return $path;
	}
}

class Path {
	public function __construct($path, $id) {
		$this->id = $id;
		$this->path = $path;
		$this->title = $this->get_title();
	}
	public function get_title() {
		$path = FS::path_to_arr($this->path);
		$title = array_pop($path);
		return $title;
	}
	private function get_parent($path) {
		$arr = explode('/', $path);
		array_pop($arr);
		return implode('/',$arr);
	}
}

function biogeog_portal_run_db_up() {
	ini_set('memory_limit', '512M');
	$f = fopen(drupal_get_path('module', 'biogeog_portal') . '/db/dir_db.csv', 'r');
	db_delete('biogeog_portal_data')->execute();
	// Create new filesystem.
	$fs = new FS();
	// Gets each file and directory in the current path split by '/'.
	while(($line = fgetcsv($f, 4000, '/')) != FALSE) {
		// Removing '.'' from beginning of path.
		array_shift($line);
		$cwd = array();
		// For every directory/file name in the path with the key value as its directory level.
		foreach($line as $key=>$dir) {
			$cwd[] = $dir;
			$fs->add_path($cwd);
		}
	}
}

function biogeog_portal_pull_dirs($dir_id, $find_col) {
	$query = db_select('biogeog_portal_data','d');
	// Ged file id, file's parent id and title of the file.
	$query->fields('d',array('id','pid','ppid','title','path'))
	// On first view, we will show directories starting at level 4.
		  ->condition($find_col,$dir_id,'=');
	$results = $query->execute();
	return $results;
}

function biogeog_portal_ajax_page($dir_id) {
	if(isset($dir_id)) {
		$results = biogeog_portal_pull_dirs($dir_id, 'pid');
		$data = array();
		while($record = $results->fetchAssoc()) {
			$fileType = preg_match('/^.*\.(.*?)$/i', $record['title'], $ft);
			if(!isset($ft[1])) {
				$type = 'directory';
			} else {
				$type = $ft[1];
			}
			$record['type'] = $type;
		    $data['items'][] = $record;
		    $data['pid'] = $record['pid'];
		    $data['ppid'] = $record['ppid'];
		}

		$pathResult = biogeog_portal_pull_dirs($dir_id, 'id');

		while($r = $pathResult->fetchAssoc()) {
			$data['path'] = explode('/',$r['path']);
		}

		// Send current filesystem level objects to app Model.
		print(json_encode($data));
	} else {
		print("You haven't requested a directory id");
	}
}

function biogeog_portal_get_image($id) {
	if(isset($id)) {
		$query = db_select('biogeog_portal_data','d');
		// Ged file id, file's parent id and title of the file.
		$query->fields('d',array('id','path','title'))
		// On first view, we will show directories starting at level 4.
			  ->condition('id',$id,'=');
		$results = $query->execute();

		$data = array();
		while($record = $results->fetchAssoc()) {
			header('Content-Disposition: application; filename="'.$record['title'].'"');
		    print(readfile($record['path']));
		}
	} else {
		print("You haven't requested a directory id");
	}
}

function biogeog_portal_get_text($id) {
	if(isset($id)) {
		$query = db_select('biogeog_portal_data','d');
		// Ged file id, file's parent id and title of the file.
		$query->fields('d',array('id','path','title'))
		// On first view, we will show directories starting at level 4.
			  ->condition('id',$id,'=');
		$results = $query->execute();

		$fs_path = variable_get('data_portal_fs_path', '/');

		$data = array();
		while($record = $results->fetchAssoc()) {
		    print(readfile($fs_path . '/' . $record['path']));
		}
	} else {
		print("You haven't requested a directory id");
	}
}

function biogeog_portal_page_gen() {
	$module_path = '/' . drupal_get_path('module', 'biogeog_portal') . '/';
	// Select biogeog data portal db containing directory heirarchy.
	$query = db_select('biogeog_portal_data','d');
	// Ged file id, file's parent id and title of the file.
	$query->fields('d',array('id','pid','title'))
	// On first view, we will show directories starting at level 4.
		  ->condition('pid',4,'=');
	$results = $query->execute();
	$data = array();
	// Run db query for initial data load in app.
	while($record = $results->fetchAssoc()) {
		dsm($record);
		$fileType = preg_match('/^.*\.(.*?)$/i', $record['title'], $ft);
		if(!isset($ft[1])) {
			$type = 'directory';
		} else {
			$type = 'file';
		}
		$record['type'] = $type;
        $data[] = $record;
    }
    // Add javascript app files and dependencies.
    drupal_add_library('system', 'ui.draggable');
    drupal_add_js($module_path . 'js/lib/handlebars.js');
    drupal_add_js($module_path . 'js/lib/underscore-min.js');
    drupal_add_js($module_path . 'js/lib/backbone-min.js');
    drupal_add_js($module_path . 'js/lib/antiscroll.js');
    drupal_add_js($module_path . 'js/Model.js');
    drupal_add_js($module_path . 'js/View.js');
    drupal_add_js($module_path . 'js/Controller.js');
    drupal_add_js($module_path . 'js/app.js');

    // Send current filesystem level objects to app Model.
	drupal_add_js(array('cec-data' => $data, 'path' => $module_path, 'menu' => $_GET['q']), 'setting');
	// Render web app using theme template
	$page = theme('biogeog_portal_template');
	return($page);
}
function biogeog_portal_permission() {
	$items = array();
	$items['access data portal'] = array(
		'title' => 'Access Data Portal Content',
		'description' => t('Access content from the biogeog data portal'));
	return($items);
}
function biogeog_portal_theme() {
	$themes = array(
		'biogeog_portal_template' => array(
			'template' => 'biogeog_portal_template',
		),
	);
	return($themes);
}
